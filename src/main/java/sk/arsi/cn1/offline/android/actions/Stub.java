/*
 * (C) Copyright 2017 Arsi (http://www.arsi.sk/).
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
package sk.arsi.cn1.offline.android.actions;

/**
 *
 * @author arsi
 */
public class Stub {

    public static final String STUB = "package #package;\n"
            + "\n"
            + "import android.content.Context;\n"
            + "import android.content.Intent;\n"
            + "import android.os.Bundle;\n"
            + "import android.view.KeyEvent;\n"
            + "\n"
            + "import com.codename1.impl.CodenameOneImplementation;\n"
            + "import com.codename1.impl.android.AndroidImplementation;\n"
            + "import com.codename1.impl.android.AndroidNativeUtil;\n"
            + "import com.codename1.impl.android.CodenameOneActivity;\n"
            + "import com.codename1.impl.android.LifecycleListener;\n"
            + "import com.codename1.io.ConnectionRequest;\n"
            + "import com.codename1.io.NetworkManager;\n"
            + "import com.codename1.io.Preferences;\n"
            + "import com.codename1.io.Util;\n"
            + "import com.codename1.location.AndroidLocationPlayServiceManager;\n"
            + "import com.codename1.notifications.LocalNotificationCallback;\n"
            + "import com.codename1.push.PushCallback;\n"
            + "import com.codename1.social.GoogleConnect;\n"
            + "import com.codename1.social.GoogleImpl;\n"
            + "import com.codename1.ui.Dialog;\n"
            + "import com.codename1.ui.Display;\n"
            + "import com.codename1.ui.Form;\n"
            + "\n"
            + "import java.io.DataInputStream;\n"
            + "import java.io.IOException;\n"
            + "import java.io.InputStream;\n"
            + "import java.util.ArrayList;\n"
            + "import java.util.Collections;\n"
            + "public class #classname extends CodenameOneActivity implements Runnable\n"
            + "{\n"
            + "    public static final String BUILD_KEY = \"MmBiMTxkMWokbj1tayM7JyklPiwjJi41en4qLS57excZEkAV\";\n"
            + "    public static final String BUILT_BY_USER = \"YHBwbUVlb21lZmQifmU=\";\n"
            + "    public static final String LICENSE_KEY = \"null\";\n"
            + "    private static final Object LOCK;\n"
            + "    public static final String PACKAGE_NAME = \"#package\";\n"
            + "    private static boolean firstTime;\n"
            + "    private static #origname i;\n"
            + "    private static #classname stubInstance;\n"
            + "    String[] consumable;\n"
            + "    private Form currentForm;\n"
            + "    private boolean running;\n"
            + "\n"
            + "    static {\n"
            + "        #classname.firstTime = true;\n"
            + "        LOCK = new Object();\n"
            + "    }\n"
            + "\n"
            + "    public #classname() {\n"
            + "        this.consumable = new String[0];\n"
            + "        #classname.stubInstance = this;\n"
            + "    }\n"
            + "\n"
            + "    public static #origname getAppInstance() {\n"
            + "        return #classname.i;\n"
            + "    }\n"
            + "\n"
            + "    public static #classname getInstance() {\n"
            + "        return #classname.stubInstance;\n"
            + "    }\n"
            + "\n"
            + "    public static boolean isRunning() {\n"
            + "        return #classname.stubInstance != null && #classname.stubInstance.running;\n"
            + "    }\n"
            + "\n"
            + "    public String d(final String s) {\n"
            + "        return Util.xorDecode(s);\n"
            + "    }\n"
            + "\n"
            + "    protected Object getApp() {\n"
            + "        return #classname.i;\n"
            + "    }\n"
            + "\n"
            + "    public String getBase64EncodedPublicKey() {\n"
            + "        return this.d(\"null\");\n"
            + "    }\n"
            + "\n"
            + "    public boolean isConsumable(final String s) {\n"
            + "        final boolean consumable = super.isConsumable(s);\n"
            + "        final ArrayList<Object> list = new ArrayList<Object>();\n"
            + "        Collections.addAll(list, this.consumable);\n"
            + "        return consumable || list.contains(s);\n"
            + "    }\n"
            + "\n"
            + "    public void onCreate(final Bundle bundle) {\n"
            + "        super.onCreate(bundle);\n"
            + "        Display.getInstance().setProperty(\"IncludeGPlayServices\", \"false\");\n"
            + "        AndroidNativeUtil.addLifecycleListener((LifecycleListener)AndroidLocationPlayServiceManager.getInstance());\n"
            + "        GoogleImpl.init();\n"
            + "        AndroidNativeUtil.addLifecycleListener((LifecycleListener)GoogleConnect.getInstance());\n"
            + "        #native"
            + "    }\n"
            + "\n"
            + "    protected void onDestroy() {\n"
            + "        super.onDestroy();\n"
            + "        Display.getInstance().callSerially(new Runnable() {\n"
            + "            @Override\n"
            + "            public void run() {\n"
            + "\n"
            + "            }\n"
            + "        });\n"
            + "        AndroidImplementation.stopContext((Context)this);\n"
            + "        this.running = false;\n"
            + "    }\n"
            + "\n"
            + "    public boolean onKeyDown(final int n, final KeyEvent keyEvent) {\n"
            + "        return super.onKeyDown(n, keyEvent);\n"
            + "    }\n"
            + "\n"
            + "    protected void onPause() {\n"
            + "        super.onPause();\n"
            + "        synchronized (#classname.LOCK) {\n"
            + "            this.currentForm = Display.getInstance().getCurrent();\n"
            + "            // monitorexit(#classname.LOCK)\n"
            + "            this.running = false;\n"
            + "        }\n"
            + "    }\n"
            + "\n"
            + "    protected void onResume() {\n"
            + "        this.running = true;\n"
            + "        super.onResume();\n"
            + "        if (!Display.isInitialized()) {\n"
            + "            AndroidImplementation.startContext((Context)this);\n"
            + "            Display.getInstance().setProperty(\"build_key\", this.d(\"MmBiMTxkMWokbj1tayM7JyklPiwjJi41en4qLS57excZEkAV\"));\n"
            + "            Display.getInstance().setProperty(\"package_name\", \"com.codename1.apps.devicetester\");\n"
            + "            Display.getInstance().setProperty(\"built_by_user\", this.d(\"YHBwbUVlb21lZmQifmU=\"));\n"
            + "        }\n"
            + "        else {\n"
            + "            AndroidImplementation.startContext((Context)this);\n"
            + "        }\n"
            + "        if (#classname.i == null) {\n"
            + "            #classname.i = new #origname();\n"
            + "            if (#classname.i instanceof PushCallback) {\n"
            + "                CodenameOneImplementation.setPushCallback((PushCallback)#classname.i);\n"
            + "            }\n"
            + "        }\n"
            + "        if (#classname.i instanceof PushCallback) {\n"
            + "            AndroidImplementation.firePendingPushes((PushCallback)#classname.i, (Context)this);\n"
            + "        }\n"
            + "        if (#classname.i instanceof LocalNotificationCallback) {\n"
            + "            final Intent intent = this.getIntent();\n"
            + "            if (intent != null && intent.getExtras() != null && intent.getExtras().containsKey(\"LocalNotificationID\")) {\n"
            + "                ((LocalNotificationCallback)#classname.i).localNotificationReceived(intent.getExtras().getString(\"LocalNotificationID\"));\n"
            + "            }\n"
            + "        }\n"
            + "        Display.getInstance().callSerially((Runnable)this);\n"
            + "    }\n"
            + "\n"
            + "    protected void onStop() {\n"
            + "        super.onStop();\n"
            + "    }\n"
            + "\n"
            + "    public void run() {\n"
            + "        if (#classname.firstTime) {\n"
            + "            #classname.firstTime = false;\n"
            + "            #classname.i.init((Object)this);\n"
            + "        }\n"
            + "        else {\n"
            + "            while (true) {\n"
            + "                while (true) {\n"
            + "                    synchronized (#classname.LOCK) {\n"
            + "                        if (this.currentForm == null) {\n"
            + "                            break;\n"
            + "                        }\n"
            + "                        if (this.currentForm instanceof Dialog) {\n"
            + "                            ((Dialog)this.currentForm).showModeless();\n"
            + "                            this.fireIntentResult();\n"
            + "                            this.currentForm = null;\n"
            + "                            this.setWaitingForResult(false);\n"
            + "                            return;\n"
            + "                        }\n"
            + "                    }\n"
            + "                    this.currentForm.show();\n"
            + "                    continue;\n"
            + "                }\n"
            + "            }\n"
            + "        }\n"
            + "        // monitorexit(o)\n"
            + "        #classname.i.start();\n"
            + "    }\n"
            + "\n"
            + "\n"
            + "\n"
            + "\n"
            + "}";

}
