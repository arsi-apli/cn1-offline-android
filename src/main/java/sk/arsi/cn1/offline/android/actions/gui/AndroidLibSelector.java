/*
 * Copyright 2017 ArSi.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package sk.arsi.cn1.offline.android.actions.gui;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.List;
import javax.swing.ListModel;
import javax.swing.event.ListDataListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import org.openide.DialogDescriptor;
import org.openide.util.Exceptions;

/**
 *
 * @author arsi
 */
public class AndroidLibSelector extends javax.swing.JPanel {

    private DialogDescriptor desc;
    private String selected = null;

    /**
     * Creates new form AndroidLibSelector
     */
    public AndroidLibSelector() {
        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        list = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        editorPane = new javax.swing.JEditorPane();

        list.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(list);

        jScrollPane2.setViewportView(editorPane);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 414, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 909, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 537, Short.MAX_VALUE)
            .addComponent(jScrollPane2)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JEditorPane editorPane;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList<String> list;
    // End of variables declaration//GEN-END:variables

    public void setDialogDescriptor(DialogDescriptor desc) {
        this.desc = desc;
        try {
            URL db = new URL("http://server.arsi.sk/cn1/versions.db");
            URLConnection connection = db.openConnection();
            connection.setConnectTimeout(3000);
            connection.connect();
            InputStream fis = connection.getInputStream();
            InputStreamReader isr = new InputStreamReader(fis, Charset.forName("UTF-8"));
            BufferedReader br = new BufferedReader(isr);
            String line;
            List<String> lines = new ArrayList<>();
            while ((line = br.readLine()) != null) {
                lines.add(line);
            }
            fis.close();
            list.setModel(new VersionListModel(lines));

        } catch (MalformedURLException ex) {
            Exceptions.printStackTrace(ex);
        } catch (IOException ex) {
            Exceptions.printStackTrace(ex);
        }
        list.addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                if (!e.getValueIsAdjusting()) {
                    selected = list.getSelectedValue();
                    String selectedValue = selected;
                    if (desc != null) {
                        desc.setValid(selectedValue != null);
                    }
                    if (selectedValue != null) {

                        if (selectedValue.contains("-")) {
                            selectedValue = selectedValue.substring(0, selectedValue.indexOf('-'));
                        }
                        final String commit = "http://server.arsi.sk/cn1/" + selectedValue + ".info";
                        try {
                            editorPane.setPage(new URL(commit));
                        } catch (Exception ee) {
                            editorPane.setContentType("text/plain");
                            editorPane.setText("The requested page cannot be found!");
                        }
                        String text = editorPane.getText();
                        editorPane.setEditorKit(new sk.arsi.cn1.offline.android.actions.gui.EditorKit());
                        editorPane.setContentType("text/x-diff");
                        editorPane.setText(text);
                    }

                }
            }
        });
        desc.setValid(selected != null);
    }

    public void refresh(){
        try {
            URL db = new URL("http://server.arsi.sk/cn1/versions.db");
            URLConnection connection = db.openConnection();
            connection.setConnectTimeout(3000);
            connection.connect();
            InputStream fis = connection.getInputStream();
            InputStreamReader isr = new InputStreamReader(fis, Charset.forName("UTF-8"));
            BufferedReader br = new BufferedReader(isr);
            String line;
            List<String> lines = new ArrayList<>();
            while ((line = br.readLine()) != null) {
                lines.add(line);
            }
            fis.close();
            list.setModel(new VersionListModel(lines));

        } catch (MalformedURLException ex) {
            Exceptions.printStackTrace(ex);
        } catch (IOException ex) {
            Exceptions.printStackTrace(ex);
        }
    }

    public String getSelected() {

        return selected;
    }

    private class VersionListModel implements ListModel<String> {

        final List<String> lines;

        public VersionListModel(List<String> lines) {
            this.lines = lines;
        }

        @Override
        public int getSize() {
            return lines.size();
        }

        @Override
        public String getElementAt(int index) {
            return lines.get(lines.size() - 1 - index);
        }

        @Override
        public void addListDataListener(ListDataListener l) {
        }

        @Override
        public void removeListDataListener(ListDataListener l) {
        }

    }
}
